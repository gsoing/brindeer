openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:9080/api/v1
    description: Environnement de gestion des profiles
  - url: http://localhost:9090/api/v1
    description: Environnement de test local
  - url: http://localhost:8081
    description: Environnement de gestion des matchs
  - url: http://localhost:8000
    description: Kong
components:
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    ProfileDto:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mail:
          type: string
          format: email
        age:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
    Match:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number

security: 
  - oAuthSample: 
    - profile
    - email
paths:
  /profiles/current:
    get:
      summary: Retourne le profile courant de l'utilisateur
      tags:
        - Profiles
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  name:
                    type: string
  /profiles:
    post:
      summary: Créer un profil
      tags:
        - Profiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
    get:
      summary: Rechercher des profils
      tags:
        - Profiles
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ObjectId _id de mongodb
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileDto'

  /api/match/find-around/{matchId}:
    servers:
      - url: http://localhost:8081
    get:
      summary: Rechercher des matchs autour d'un match spécifique
      tags:
        - Match
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: string
          description: ID du match ObjectId _id de mongodb
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        '404':
          description: Aucun match trouvé

  /api/match/update-location/{matchId}:
    servers:
      - url: http://localhost:8081
    put:
      summary: Mettre à jour la localisation d'un match
      tags:
        - Match
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: string
          description: ID du match ObjectId _id de mongodb à mettre à jour 
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: double
          description: Latitude
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: double
          description: Longitude
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string

  /api/match/get-all-match:
    servers:
      - url: http://localhost:8081
    get:
      summary: Récupérer tous les matchs
      tags:
        - Match
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
