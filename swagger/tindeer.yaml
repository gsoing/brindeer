openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:8000/
    description: API Manager
  - url: http://localhost:9080/api/v1
    description: Environnement de test Profile Docker
  - url: http://localhost:9090/api/v1
    description: Environnement de test Profile Local
  - url: http://localhost:9060/api/v1
    description: Environnement de test Match Docker
  - url: http://localhost:9070/api/v1
    description: Environnement de test Match Local
components:
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    profile:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mail:
          type: string
        age:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        created:
          type: integer
        modified:
          type: integer
security: 
  - oAuthSample: 
    - profile
    - email
paths:
  /profiles/current:
    get:
      summary: Retourne le profile courant de l'utilisateur
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  name:
                    type: string
  /profiles/create:
    post:
      summary: Création du profil de l'utilisateur courant
      responses:
        200:
          description: Profil crée
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /profiles/update:
    put:
      summary: Mise à jour du profil de l'utilisateur courant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profile"
      responses:
        '200':
          description: Profil mis à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /match/update:
    post:
      summary: Mise à jour de la localisation de l'utilisateur courant
      responses:
        '200':
          description: Localisation mis à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /match/search:
    get:
      summary: Retourne la liste des utilisateurs dans un rayon de 100 mètres
      responses:
        '200':
          description: Retourne une liste d'utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string