openapi: 3.0.0
info:
  title: Tindeer API
  description: |- 
    **`Nabile BATAILLE`** et **`Clément MOULY`**
    
    Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://kong:8000/api/v1
    description: kong
  - url: http://api-match:3000/api/v1
    description: api-match
  - url: http://localhost:9080/api/v1
    description: profile api - Docker
  - url: http://localhost:9090/api/v1
    description: profile api - Local
components:
  securitySchemes:
    oAuthSample:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    ProfileDto:
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier of the profile."
        userId:
          type: string
          description: "The user's unique identifier, extracted from JWT claims."
        mail:
          type: string
          format: email
          description: "The user's email address."
        age:
          type: integer
          format: int32
          minimum: 13
          description: "The user's age, must be at least 13."
        firstName:
          type: string
          description: "The user's first name."
        lastName:
          type: string
          description: "The user's last name."
        created:
          type: string
          format: 'date-time'
          description: "The timestamp when the profile was created, in YYYY-MM-DD HH:mm:ss format."
        modified:
          type: string
          format: 'date-time'
          description: "The timestamp when the profile was last modified, in YYYY-MM-DD HH:mm:ss format."
      required:
        - userId
        - mail
        - firstName
        - lastName
    PageDtoProfileDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProfileDto'
        totalElements:
          type: integer
          description: Total number of elements.
        pageSize:
          type: integer
          description: Number of elements per page.
        next:
          type: string
          format: uri
          description: URI to the next page of results.
        first:
          type: string
          format: uri
          description: URI to the first page of results.
        last:
          type: string
          format: uri
          description: URI to the last page of results.

security:
  - oAuthSample:
      - profile
      - email
tags:
  - name: profile
    description: Profiles
  - name: match
    description: Matches

paths:
  ## Matches
  /matches/users:
    get:
      tags:
        - match
      summary: Retrieves the list of users
      responses:
        '200':
          description: Successful retrieval of user list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Yannis
                    coordinates:
                      type: object
                      properties:
                        latitude:
                          type: number
                          format: float
                          example: 48.856483
                        longitude:
                          type: number
                          format: float
                          example: 2.3522219
    post:
      tags:
        - match
      summary: Creates a new user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Yannis
                coordinates:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: float
                      example: 48.856483
                    longitude:
                      type: number
                      format: float
                      example: 2.3522219
              required:
                - name
                - coordinates
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      coordinates:
                        type: object
                        properties:
                          latitude:
                            type: number
                            format: float
                          longitude:
                            type: number
                            format: float
                      _id:
                        type: string
        '400':
          description: Invalid user profile data
        '500':
          description: Internal Server Error - Error occurred while creating user profile

  /matches/profiles:
    get:
      tags:
        - match
      summary: Retrieves user profiles within 100 meters of the connected user
      responses:
        '200':
          description: OK - List of user profiles within 100 meters of the connected user
          content:
            application/json:
              schema: 
                type: object
                properties:
                  name:
                    type: string

  ## Profiles
  /profiles/current:
    get:
      tags:
        - profile
      summary: Retourne le profile courant de l'utilisateur
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
        '404':
          description: Profile not found
        '400':
          description: Bad request

  /profiles:
    post:
      tags:
        - profile
      summary: Create a new profile with the currently authenticated user's ID
      responses:
        '200':
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
        '400':
          description: Bad request
    get:
      tags:
        - profile
      summary: Search profiles
      description: Returns a paginated list of profiles based on the optional query parameter.
      parameters:
        -   in: query
            name: query
            schema:
              type: string
            required: false
            description: Optional query string for searching profiles.
        -   in: query
            name: page
            schema:
              type: integer
            required: false
            description: Page number of the results to fetch.
        -   in: query
            name: size
            schema:
              type: integer
            required: false
            description: Number of records per page.
      responses:
        '200':
          description: A paginated list of profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDtoProfileDto'
        '400':
          description: Bad request
      operationId: searchProfile
    put:
      tags:
        - profile
      summary: Update current user's profile
      description: Updates the profile of the currently authenticated user using JWT claims.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
        '404':
          description: Profile not found
        '400':
          description: Bad request
      operationId: updateProfile
  /profiles/{id}:
    get:
      tags:
        - profile
      summary: Récupère le profil d'un utilisateur grâce à son ID
      parameters:
        -   name: id
            in: path
            required: true
            schema:
              type: string
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
        '404':
          description: Profile not found
        '400':
          description: Bad request



