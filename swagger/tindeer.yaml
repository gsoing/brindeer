openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Environnement de test Docker
  - url: http://localhost:9080
    description: Environnement de test local
components:
  schemas:
    ProfileDto:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mail:
          type: string
        age:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        created:
          type: integer
        updated:
          type: integer

    ProfileUpdateDto:
      type: object
      properties:
        id:
          type: string
        age:
          type: integer
    ProfileDtos:
      type: array
      items:
        $ref: "#/components/schemas/ProfileDto"
    ProfileMatchDto:
      type: object
      properties:
        id:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    ProfileMatchDtos:
      type: array
      items:
        $ref: "#/components/schemas/ProfileMatchDto"

  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
security: 
  - oAuthSample: 
    - profile
    - email

paths:
  /profiles/current:
    get:
      summary: Return the profile of the current user
      responses:
        '200':    # status code
          description: Successfully returned the current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"

  /profiles:
    get:
      summary: Return the profile lists
      responses:
        '200':
          description: Successfully returned the profile list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDtos"
    post:
      summary: Adds a new user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileUpdateDto"
      responses:
        '201':
          description: Successfully Created Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileUpdateDto"
  /profiles/{id}:
    get:
      summary: Get user by the profile ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileUpdateDto"
    put:
      summary: Update user profile by the profile ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileUpdateDto"
      parameters:
          - in: path
            name: id
            schema:
               type: integer
            required: true
      responses:
        '201':
          description: Successfully updated user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileUpdateDto"

  /matches/{id}:
    get:
      summary: Return the list of match in a radius of 100m. It will return the location of every match and its id
      responses:
        '200':
          description: Successfully returned the profile list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileMatchDtos"

  /matches/location/{id}:
    put:
      summary: Update user location by the profile ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileMatchDto"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '201':
          description: Successfully updated user  location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileMatchDto"

